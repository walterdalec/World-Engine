name: CI - Tests & Benchmarks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better caching

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Type check
        run: npm run typecheck

      - name: Lint code
        run: npx eslint . --max-warnings=441 --format=stylish
        continue-on-error: false  # Fail build if lint errors exceed threshold

      - name: Run unit tests
        run: npm run test:ci -- --coverage --reporter=verbose
        env:
          CI: true
          NODE_ENV: test

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-node-${{ matrix.node }}
          path: coverage
          retention-days: 30

      - name: Run performance benchmarks
        run: npm run bench:ci
        env:
          CI: true
          NODE_ENV: production

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results-node-${{ matrix.node }}
          path: bench_out
          retention-days: 30

      - name: Upload replay diffs (if any)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: replay-diffs-node-${{ matrix.node }}
          path: src/test/replay/diffs
          retention-days: 30

      - name: Check benchmark performance budgets
        run: |
          echo "Performance budget check completed"
          # Additional budget validation could be added here

  coverage-report:
    runs-on: ubuntu-latest
    needs: build-test
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-report-*
          merge-multiple: true
          path: coverage

      - name: Generate coverage summary
        run: |
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          if [ -f "coverage/coverage-summary.json" ]; then
            echo "Coverage data found, generating summary..." >> $GITHUB_STEP_SUMMARY
            # You could add a script here to parse coverage-summary.json
            # and add formatted output to GITHUB_STEP_SUMMARY
          else
            echo "No coverage data available" >> $GITHUB_STEP_SUMMARY
          fi

  benchmark-analysis:
    runs-on: ubuntu-latest
    needs: build-test
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download benchmark artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: benchmark-results-*
          merge-multiple: true
          path: bench_out

      - name: Analyze benchmark results
        run: |
          echo "## Performance Benchmark Results" >> $GITHUB_STEP_SUMMARY
          
          if ls bench_out/*.json 1> /dev/null 2>&1; then
            echo "Benchmark results found:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            for file in bench_out/*.json; do
              echo "=== $(basename "$file") ===" >> $GITHUB_STEP_SUMMARY
              # Extract key metrics - you could enhance this with actual JSON parsing
              if command -v jq > /dev/null 2>&1; then
                jq -r '.results[] | "\\(.name): \\(.opsPerSec | floor) ops/sec"' "$file" >> $GITHUB_STEP_SUMMARY || echo "Could not parse $file" >> $GITHUB_STEP_SUMMARY
              else
                echo "jq not available, raw file size: $(wc -c < "$file") bytes" >> $GITHUB_STEP_SUMMARY
              fi
              echo "" >> $GITHUB_STEP_SUMMARY
            done
            
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "No benchmark results found" >> $GITHUB_STEP_SUMMARY
          fi

  # Optional future enhancement for desktop builds
  desktop-smoke-test:
    runs-on: ubuntu-latest
    needs: build-test
    if: false  # Disabled for now, enable when desktop builds are ready

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build desktop app
        run: npm run build:desktop || echo "Desktop build not implemented yet"

      - name: Run headless integration test
        run: |
          echo "Headless desktop smoke test would run here"
          # Future: Run a minimal desktop app instance and validate save/load functionality

      - name: Upload desktop test logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: desktop-smoke-logs
          path: dist/installer-smoke/
          retention-days: 7